alias userSP R1;
alias systemCallNumber R2;
alias processTableEntry R3;

processTableEntry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE + 1]*16;
[processTableEntry + 13]= SP;

SP = [processTableEntry + 11]*512  - 1;


userSP = [processTableEntry + 13];
systemCallNumber = [[PTBR + 2*((userSP-5)/512)] * 512 + ((userSP-5)%512)] ;

[processTableEntry + 9] = systemCallNumber;




R4 = [[PTBR + 2*((userSP-4)/512)] * 512 + ((userSP-4)%512)] ;

alias returnAddress R5;
returnAddress = [PTBR + 2*((userSP-1)/512)]*512 + ((userSP-1)%512);


if(systemCallNumber == INT_OPEN) then
    alias fileName R4;

    alias resourceTableEntry R6;
    alias freeEntry R7;
    alias counter R8;
    resourceTableEntry = [processTableEntry + 11] * 512 + RESOURCE_TABLE_OFFSET;
    counter = 0;
    freeEntry = -1;


    while(counter < 8) do 
        if([resourceTableEntry + 2*counter] == -1) then
            freeEntry = counter;
            break;
        endif;
        counter = counter + 1;

    endwhile;

    if(freeEntry == -1) then
            [returnAddress] = -3;
            goto returnToUser;
    endif;


    multipush(R1,R2,R3,R4,R5,R6,R7);

    multipush(R4);
    R1 = ACQUIRE_KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R4);

    R1 = OPEN;
    R2 = fileName;
    call FILE_MANAGER;
    multipop(R1,R2,R3,R4,R5,R6,R7);

    if(R0 >= -3 && R0 <= -1) then
            [returnAddress] = R0;
            goto endOfCode;
    endif;


    [resourceTableEntry + 2*freeEntry] = FILE;
    [resourceTableEntry + 2*freeEntry + 1] = R0;


    [returnAddress] = freeEntry;
    goto endOfCode;
endif;



if(systemCallNumber == INT_SEEK || systemCallNumber ==  INT_CLOSE) then
    alias fd R4;
    if(fd<0 || fd>7) then
        [returnAddress] = -1;
        goto returnToUser;
    endif;
	
    alias resourceTableEntry R6;
    resourceTableEntry = [processTableEntry + 11]  * 512  + RESOURCE_TABLE_OFFSET + 2*fd;

    if([resourceTableEntry] == -1 || [resourceTableEntry] != FILE) then
        [returnAddress] = -1;
        goto returnToUser;
    endif;


    alias openFileTableEntry R7;
    openFileTableEntry = OPEN_FILE_TABLE + [resourceTableEntry + 1] * 4;
    
    if(systemCallNumber == INT_SEEK) then
        alias inodeIndex R8;
        alias inodeTableEntry R9;
        inodeIndex = [openFileTableEntry ];

        inodeTableEntry =  INODE_TABLE + inodeIndex * 16 ;


        if([inodeTableEntry+4] == 0) then
            if( [SYSTEM_STATUS_TABLE] != 1 && [inodeTableEntry+3] != [SYSTEM_STATUS_TABLE] && [inodeTableEntry+4] == EXCLUSIVE) then
                [returnAddress] = -3;

                goto endOfCode;

            endif;
        endif;


        multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9);
        multipush(R8);
        R1 = ACQUIRE_KERN_LOCK;
        call ACCESS_CONTROL;
        multipop(R8);

        R1 = ACQUIRE_INODE;
        R2 = inodeIndex;
        R3 = [SYSTEM_STATUS_TABLE + 5*CORE + 1];
        call RESOURCE_MANAGER;
        multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9);

        
        if(R0 == -1) then
            [returnAddress] = -1;
            goto endOfCode;
            
        endif;


        alias offset R10;
        offset = [([PTBR + 2* ((userSP - 3) / 512)] * 512) + ((userSP - 3) % 512)] ;
    
        alias fileSize R11;
        if(inodeIndex == INODE_ROOT) then
            fileSize = 480;
        else
            fileSize = [inodeTableEntry + 2];
        endif;


        if([openFileTableEntry+2] + offset < 0 ) then 
            
            
            [returnAddress] = -2;
            
          
            goto releaseInode;

        endif;
        
        if(offset == 0) then
            [openFileTableEntry+2] = 0;

        else
            if([openFileTableEntry+2]+offset > fileSize) then
                [openFileTableEntry+2] = fileSize;

            else
                [openFileTableEntry+2] = [openFileTableEntry+2] + offset;

            endif;
        endif;

        [returnAddress] = 0;


        releaseInode:
        multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
        R1 = RELEASE_INODE;
        R2 = inodeIndex;
        R3 = [SYSTEM_STATUS_TABLE + 5*CORE + 1];
        call RESOURCE_MANAGER;
        multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
        goto endOfCode;
    endif;

    if(systemCallNumber == INT_CLOSE) then // Close
        multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
        multipush(R6);
        R1 = ACQUIRE_KERN_LOCK;
        call ACCESS_CONTROL;
        multipop(R6);

        R1 = CLOSE;
        R2 = [resourceTableEntry+1];
        call FILE_MANAGER;
        multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);


        [resourceTableEntry] = -1;
        [resourceTableEntry+1] = -1;

        [returnAddress] = 0;
        goto endOfCode;

    endif;


endif;

endOfCode:
    multipush(R3);
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R3);
returnToUser:
    [processTableEntry + 9] = 0;
    SP = [processTableEntry + 13];
    ireturn;