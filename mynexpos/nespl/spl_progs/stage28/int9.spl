[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 13] = SP;

alias userSP R1;
userSP=SP;
PTBR = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 14];


[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1]*16) + 9] = 9;

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 5*CORE + 1]*16) + 11]*512  - 1;

multipush(R1);
R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;
multipop(R1);

alias physicalPageNum R5;
alias offset R2;
alias fileNamePhysicalAddr R3;
alias fileName R4;

physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)]; 
offset = (userSP - 4) % 512;
fileNamePhysicalAddr = (physicalPageNum * 512) + offset;
fileName=[fileNamePhysicalAddr];

alias counter R5;
alias inodeEntryFilename R2;
alias inodeIndex R3; 
counter = 0;
inodeIndex = -1;
while( counter < MAX_FILE_NUM ) do
    inodeEntryFilename = [INODE_TABLE + (counter * 16)+1];
    if(inodeEntryFilename == fileName)then
        inodeIndex = counter;
        if([INODE_TABLE + (counter * 16)] != EXEC)then
            inodeIndex = -1;
        endif;
        break;
    endif;
    counter = counter + 1;
endwhile;


if (inodeIndex == -1) then
    [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 9] = 0;
    [[PTBR + 2*((userSP - 1)/512)] * 512 + ((userSP - 1)%512)] = -1;
    
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 13];
    ireturn;
endif;


multipush(R0,R1,R2,R3,R4,R5);
R1 = EXIT_PROCESS; 
R2 = [SYSTEM_STATUS_TABLE + 5*CORE + 1]; 
call PROCESS_MANAGER; 
multipop(R0,R1,R2,R3,R4,R5);

alias userAreaPageNum R5;
userAreaPageNum = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 11];
[MEMORY_FREE_LIST + userAreaPageNum] =  1;
[SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2]-1;

SP = [PROCESS_TABLE +  [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16 + 11 ]* 512 - 1;

[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 4] = RUNNING;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16) + 7] = inodeIndex;


//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";


[PTBR+6] = -1;
[PTBR+7] = "0000";

multipush(R0,R1,R2,R3,R4,R5,R6);
//Stack
R1 = 1; 
call MEMORY_MANAGER; 
[PTBR+16] = R0;
[PTBR+17] = "0110";
multipop(R0,R1,R2,R3,R4,R5,R6);

multipush(R0,R1,R2,R3,R4,R5,R6);
R1 = 1;
call MEMORY_MANAGER; 
[PTBR+18] = R0;
[PTBR+19] = "0110";
multipop(R0,R1,R2,R3,R4,R5,R6);

multipush(R0,R1,R2,R3,R4,R5,R6);

R1 = GET_CODE_PAGE;
R2 = [INODE_TABLE + (inodeIndex * 16) + 8];
R3 = [SYSTEM_STATUS_TABLE + 5*CORE + 1];
call MEMORY_MANAGER; 

[PTBR+8] = R0;
[PTBR+9] = "0110";
multipop(R0,R1,R2,R3,R4,R5,R6);


[PTBR+10] = -1;
[PTBR+11] = "0000";

[PTBR+12] = -1;
[PTBR+13] = "0000";

[PTBR+14] = -1;
[PTBR+15] = "0000";

alias counter R2;
counter = 0;
while(counter < 10)do
    [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE + 1] *10 + counter] =-1;
    counter = counter +1;
endwhile;
counter = 0;

while(counter < 4) do
    [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE + 1] *10 + 4 + counter] = [INODE_TABLE + (inodeIndex * 16) + 8 + counter];
    counter = counter + 1;
endwhile;

[[PTBR+16]*512 ] = [[PTBR+8]*512+1];

R1 = RELEASE_LOCK;
R2 = KERN_LOCK;
call ACCESS_CONTROL;
SP = 8*512;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 5*CORE + 1] * 16 + 9] = 0;

ireturn;