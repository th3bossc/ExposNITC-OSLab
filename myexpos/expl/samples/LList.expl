type 
    Node {
        int val;
        linkedList next;
    }

    linkedList {
        Node head;
        Node tail;
        int len;
    }   
endtype 

decl
    int insertList(int val);
    int printList();
    Node head, tail;
enddecl

int insertList(int val) {
    decl 
        Node newNode;
    enddecl
    begin 
        newNode = alloc();
        newNode.val = val;
        newNode.next = null;
        if (head == null) then
            head = newNode;
            tail = newNode;
        else
            tail.next = newNode;
            tail = newNode;
        endif;
        return 0;
    end
}

int printList() {
    decl 
        Node it;
        int temp;
    enddecl

    begin
        it = head;
        while (it != null) do
            temp = exposcall("Write", -2, it.val);
            it = it.next;
        endwhile;
        return 0;
    end
}

int main() {
    decl    
        int n, temp, data;
    enddecl

    begin 
        temp = initialize();
        temp = exposcall("Heapset");
        head = null;
        tail = null;
        temp = exposcall("Read", -1, n);

        while(n > 0) do
            temp = exposcall("Read", -1, data);
            temp = insertList(data);
            n = n - 1;
        endwhile;
        temp = printList();
        return 0;
    end
}