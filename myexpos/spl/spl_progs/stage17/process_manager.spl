//module 1
alias functionNumber R1;
alias currentPID R2;
if (functionNumber == 2) then 
    // print "FreeUserAreaPage";
    alias userAreaPage R3;
    userAreaPage = [PROCESS_TABLE + (currentPID*16) + 11];
    multipush(R0, R1, R2, R3);
    R1 = 2;
    R2 = userAreaPage;
    call MEMORY_MANAGER;
    multipop(R0, R1, R2, R3);
    // print "FreeUserAreaPageO";
endif;

if (functionNumber == 3) then
    // print "ExitProcess";
    multipush(R0, R1, R2);
    functionNumber = 4;
    call PROCESS_MANAGER;
    multipop(R0, R1, R2);
    
    alias userAreaPage R3;
    userAreaPage = [PROCESS_TABLE + (currentPID*16) + 11];
    multipush(R0, R1, R2, R3);
    R1 = 2;
    R2 = userAreaPage;
    call MEMORY_MANAGER;
    multipop(R0, R1, R2, R3);

    [PROCESS_TABLE + (currentPID*16) + 4] = TERMINATED;
    // print "ExitProcessO";
endif;

if (functionNumber == 4) then 
    // print "FreePageTable";
    [PTBR + 0] = -1;
    [PTBR + 1] = "0000";
    [PTBR + 2] = -1;
    [PTBR + 3] = "0000";

    alias counter R3;
    counter = 4;
    while (counter < 20) do
        if ([PTBR + counter] != -1) then
            multipush(R0, R1, R2, R3);
            R1 = 2;
            R2 = [PTBR + counter];
            call MEMORY_MANAGER;
            multipop(R0, R1, R2, R3);

            [PTBR + counter] = -1;
            [PTBR + counter + 1] = "0000";
        endif;
        counter = counter + 2;
    endwhile;
    // print "FreePageTableO";
endif;
return;