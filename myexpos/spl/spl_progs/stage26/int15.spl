alias userSP R0;
userSP = SP; 
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11]*512 - 1;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = INT_SHUTDOWN; //21

if ([SYSTEM_STATUS_TABLE+1] != 2 && [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16 + 3)] != 1) then
    SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13];
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 0;
    [[PTBR + 2*(userSP-1)%512]*512 + (userSP-1)%512] = -1;
    ireturn;
else
    //kill all processes
    multipush(R0, R1);
    R1 = 5;
    R2 = [SYSTEM_STATUS_TABLE+1];
    call PROCESS_MANAGER;
    multipop(R0, R1);

    alias counter R1;

    counter = 0;
    while (counter < 4) do
        if ([BUFFER_TABLE + counter*4 + 1] == 1) then 
            multipush(R0, R1);
            R4 = [BUFFER_TABLE + counter*4 + 0];
            R3 = 71 + counter;
            R1 = 1;
            R2 = [SYSTEM_STATUS_TABLE+1];
            call DEVICE_MANAGER;
            multipop(R0, R1);
        endif;
        counter = counter+1;
    endwhile;

    //INODE TABLE
    multipush(R0, R1);
    R1 = 1;
    R2 = [SYSTEM_STATUS_TABLE+1];
    R3 = 59;
    R4 = 3;
    call DEVICE_MANAGER;
    multipop(R0, R1);

    //USER TABLE
    multipush(R0, R1);
    R1 = 1;
    R2 = [SYSTEM_STATUS_TABLE+1];
    R3 = 60;
    R4 = 4;
    call DEVICE_MANAGER;
    multipop(R0, R1);

    //ROOT FILE
    multipush(R0, R1);
    R1 = 1;
    R2 = [SYSTEM_STATUS_TABLE+1];
    R3 = 62;
    R4 = 5;
    call DEVICE_MANAGER;
    multipop(R0, R1);

    //DISK FREE LIST 
    multipush(R0, R1);
    R1 = 1;
    R2 = [SYSTEM_STATUS_TABLE+1];
    R3 = 61;
    R4 = 2;
    call DEVICE_MANAGER;
    multipop(R0, R1);
    
    halt;
endif;
