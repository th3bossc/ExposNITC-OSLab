//module 2
alias functionNumber R1;

//GET_FREE_PAGE
if (functionNumber == 1) then
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
    while ([SYSTEM_STATUS_TABLE + 2] == 0) do
        [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 4] = WAIT_MEM;
        call SCHEDULER;
    endwhile;
    
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
    
    alias counter R2;
    counter = 76;
    while (counter < NUM_MEM_PAGES && [MEMORY_FREE_LIST + counter] != 0) do
        counter = counter+1;
    endwhile;
    [MEMORY_FREE_LIST + counter] = 1;
    breakpoint;
    R0 = counter;
endif;

//RELEASE_PAGE
if (functionNumber == 2) then
    alias pageNum R2;
    [MEMORY_FREE_LIST + pageNum] = [MEMORY_FREE_LIST + pageNum] - 1;
    
    if ([MEMORY_FREE_LIST + pageNum] == 0) then 
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
    endif;

    alias counter R3; 
    counter = 1;
    while (counter < MAX_PROC_NUM) do
        if ([PROCESS_TABLE + counter*16 + 4] == WAIT_MEM) then
            [PROCESS_TABLE + counter*16 + 4] = READY;
        endif;
        counter = counter + 1;
    endwhile;
    breakpoint;
endif;

//GET_FREE_BLOCK
if (functionNumber == 3) then
    alias counter R2;
    counter = DISK_FREE_AREA;
    while (counter < DISK_SWAP_AREA) do
        if ([DISK_FREE_LIST + counter] == 0) then
            break;
        endif;
        counter = counter+1;
    endwhile;
    
    if (counter == DISK_SWAP_AREA) then
        R0 = -1;
    else
        [DISK_FREE_LIST + counter] = 1;
        R0 = counter;
    endif;
endif;

//RELEASE_BLOCK
if (functionNumber == 4) then
    alias blockNumber R2;
    [DISK_FREE_LIST + blockNumber] = [DISK_FREE_LIST + blockNumber] - 1;
endif;

// Get Code Page :
if(functionNumber == 5) then
	alias blockNum R2; 
	alias i R3;
	alias j R4;
	alias pageNo R5;
	i=0;
	while(i<15) do
	  j=4;
	  while(j<8) do
	    if([DISK_MAP_TABLE + 10*i + j] == blockNum) then
	      pageNo = [PAGE_TABLE_BASE + 20*i + 8 + 2*(j-4)];
	      if(pageNo != -1) then
		[MEMORY_FREE_LIST + pageNo] = [MEMORY_FREE_LIST + pageNo] + 1;
		R0 = pageNo;
		return;	
	      endif;
	    endif;
	  j = j + 1;
	  endwhile;
	i = i + 1;
	endwhile;
	multipush(R1, R2);
	R1 = 1;
	call MOD_2;
	pageNo = R0;
	multipop(R1, R2);
	multipush(R1, R2, R5);
	R1 = 2;
	R4 = R2;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = pageNo;
	call MOD_4;
	multipop(R1, R2, R5);
	R0 = pageNo;
	return;
	
endif;


//GET_SWAP_BLOCK
if (functionNumber == 6) then 
    alias counter R2;
    counter = DISK_SWAP_AREA;
    while (counter < DISK_SIZE) do
        if ([DISK_FREE_LIST + counter] == 0) then 
            break;
        endif;
        counter = counter+1;
    endwhile;
    if (counter == DISK_SIZE) then
        R0 = -1;
    else
        [DISK_FREE_LIST + counter] = 1;
        R0 = counter;
    endif;
endif;

return;