[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 - 1;

backup;

if ([SYSTEM_STATUS_TABLE+5] != 0) then 
    if ([SYSTEM_STATUS_TABLE+1] == SWAPPER_DAEMON) then 
        R1 = [SYSTEM_STATUS_TABLE+5];
        R2 = [SYSTEM_STATUS_TABLE+1];
        call PAGER_MODULE;
    endif;
else
    if ([SYSTEM_STATUS_TABLE+2] < MEM_LOW) then 
        [SYSTEM_STATUS_TABLE+5] = SWAP_OUT;
    else
        if ([SYSTEM_STATUS_TABLE+4] > 0) then    
            if ([SYSTEM_STATUS_TABLE+2] > MEM_HIGH) then
                [SYSTEM_STATUS_TABLE+5] = SWAP_IN;
            else
                alias counter R0;
                counter = 0;
                while (counter < MAX_PROC_NUM) do
                    if ([PROCESS_TABLE + counter*16 + 6] == 1 && [PROCESS_TABLE + counter*16 + 0] > MAX_TICK) then
                        [SYSTEM_STATUS_TABLE+5] = SWAP_IN;
                        break;
                    endif;
                    counter = counter+1;
                endwhile;
            endif;
        endif;
    endif;
endif;




[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 4] = READY; 

alias counter R0;
counter = 0;
while (counter < MAX_PROC_NUM) do
    [PROCESS_TABLE + counter*16 + 0] = [PROCESS_TABLE + counter*16 + 0] + 1; 
    counter = counter+1;
endwhile;


call SCHEDULER;
breakpoint;
restore; // restore registers from kernel stack

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13]; //load sp from word 13 of process table
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
ireturn;