//set MODE flag of the process to system call number (5)
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 5;

alias userSP R0;
userSP = SP;

//change user stack to kernel stack
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 - 1;



//get file descriptor
alias physicalPageNum R1;
alias offset R2;
alias fileDescriptorAddr R3;
alias fileDescriptor R4;

physicalPageNum = [PTBR + 2*((userSP-4)/512)]; //get physical page number of file descriptor
offset = (userSP-4)%512; //get offset of file descriptor
fileDescriptorAddr = physicalPageNum*512 + offset; //get physical address of file descriptor
fileDescriptor = [fileDescriptorAddr];


if (fileDescriptor != -2) then
    alias physicalAddrRetVal R5;
    physicalAddrRetVal = [PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512;
    [physicalAddrRetVal] = -1;
else
    alias word R5;
    alias physicalAddrRetVal R6;
    word = [[PTBR + 2*((userSP-3)/512)]*512 + (userSP-3)%512];
    
    multipush(R0, R1, R2, R3, R4, R5, R6);
    alias functionNumber R1;
    alias currentPID R2;
    alias wordToPrint R3;

    functionNumber = 3;
    currentPID = [SYSTEM_STATUS_TABLE+1];
    wordToPrint = word;

    call DEVICE_MANAGER;

    multipop(R0, R1, R2, R3, R4, R5, R6);

    physicalAddrRetVal = [PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512;
    [physicalAddrRetVal] = 0;    
endif;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13];
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;

ireturn;


