[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 9;

alias userSP R0;
userSP = SP;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11]*512 - 1;

alias fileName R1;
fileName = [[PTBR + 2*((userSP-4)/512)]*512 + (userSP-4)%512];

alias fileBlock R10;
fileBlock = 0;
while (fileBlock < MAX_FILE_NUM && [INODE_TABLE + (fileBlock*16) + 1] != fileName) do
    fileBlock = fileBlock + 1;  
endwhile;

if (fileBlock == MAX_FILE_NUM || [INODE_TABLE + (fileBlock*16) + 0] != EXEC) then
    alias retAddress R3;
    retAddress = [PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512;
    SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13];
    [retAddress] = -1;
else
    multipush(R0, R1, R2, R3, R10);
    R1 = 3; //functionNumber for EXIT_PROCESS 
    R2 = [SYSTEM_STATUS_TABLE+1];
    call PROCESS_MANAGER;
    multipop(R0, R1, R2, R3, R10);
    
    alias userPageNum R4;
    userPageNum = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11];
    [MEMORY_FREE_LIST + userPageNum] = [MEMORY_FREE_LIST + userPageNum] + 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
    SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11]*512 - 1;

    alias counter R5;
    alias resourceTable R6;
    resourceTable = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11]*512 + RESOURCE_TABLE_OFFSET;
    counter = 0;
    while (counter < 8) do 
        [resourceTable + counter*2 + 0] = -1;
        [resourceTable + counter*2 + 1] = -1;
        counter = counter+1;
    endwhile;


    
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 4] = RUNNING;
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 7] = fileBlock;
    
    PTBR = PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20;
    //library
    [PTBR + 0] = 63;
    [PTBR + 1] = "0100";
    [PTBR + 2] = 64;
    [PTBR + 3] = "0100";
    
    
    //2 pages for heap
    [PTBR + 4] = -1;
    [PTBR + 5] = "0000";
    [PTBR + 6] = -1;
    [PTBR + 7] = "0000";
    // multipush(R0, R1, R2, R3, R4, R10);
    // R1 = 1;
    // call MEMORY_MANAGER;
    // [PTBR + 4] = R0;
    // [PTBR + 5] = "0110";
    // R1 = 1;
    // call MEMORY_MANAGER;
    // [PTBR + 6] = R0;
    // [PTBR + 7] = "0110";
    // multipop(R0, R1, R2, R3, R4, R10);

    //loading first code block into memory

    multipush(R0, R1, R2, R3, R4, R5, R6, R10);
    R1 = 5;
    R2 = [INODE_TABLE + fileBlock*16 + 8];
    R3 = [SYSTEM_STATUS_TABLE+1];
    call MEMORY_MANAGER;
    R11 = R0;
    multipop(R0, R1, R2, R3, R4, R5, R6, R10);
    [PTBR + 8] = R11;
    [PTBR + 9] = "0100";


    alias i R5;
    alias pageNumber R6;
    i = 9;
    pageNumber = 10;

    while (i < 12) do 
        [PTBR + pageNumber] = -1;
        [PTBR + pageNumber + 1] = "0000";

        i = i + 1;
        pageNumber = pageNumber + 2;
    endwhile;
    
    //2 pages for stack
    multipush(R0, R1, R2, R3, R4, R5, R6, R10);
    R1 = 1;
    call MEMORY_MANAGER;
    R11 = R0;
    multipop(R0, R1, R2, R3, R4, R5, R6, R10);
    [PTBR + 16] = R11;
    [PTBR + 17] = "0110";
    
    multipush(R0, R1, R2, R3, R4, R5, R6, R10);
    R1 = 1;
    call MEMORY_MANAGER;
    R11 = R0;
    multipop(R0, R1, R2, R3, R4, R5, R6, R10);
    [PTBR + 18] = R11;
    [PTBR + 19] = "0110";
    
    [[PTBR + 16]*512] = [[PTBR + 8]*512 + 1];
    SP = 8*512;

    // setting the DISK map table
    i = 0;

    while (i < 10) do
        [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10 + i] = -1;
        i = i + 1;
    endwhile;

    i = 4;
    alias codeBlock R6;
    codeBlock = 8;

    while ([INODE_TABLE + fileBlock*16 + codeBlock] != -1) do
        [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10 + i] = [INODE_TABLE + fileBlock*16 + codeBlock];
        i = i + 1;
        codeBlock = codeBlock + 1;
    endwhile;

    alias retAddress R3;
    retAddress = [PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512;
    [retAddress] = 0;
endif;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 0;
breakpoint;
ireturn;
