breakpoint;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 8;

alias userSP R0;
userSP = SP;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11]*512 - 1;

alias newPID R2;
multipush(R0);
R1 = 1;
call PROCESS_MANAGER;
newPID = R0;
multipop(R0);

if (newPID == -1) then 
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 0;
    [[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = -1;
    SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13];
else   
    //allocating heap if not already allocated in parent
    if ([PTBR+4] == -1) then
        multipush(R0, R1, R2);
        R1 = 1;
        call MEMORY_MANAGER;
        [PTBR + 4] = R0;
        [PTBR + 5] = "0110";
        R1 = 1;
        call MEMORY_MANAGER;
        [PTBR + 6] = R0;
        [PTBR + 7] = "0110";
        multipop(R0, R1, R2);         
    endif;

    alias newPTBR R4;
    newPTBR = PAGE_TABLE_BASE + newPID*20;

    multipush(R0, R1, R2, R3, R4); //allocating new pages for the stack
    R1 = 1;
    call MEMORY_MANAGER;
    R5 = R0;
    multipop(R0, R1, R2, R3, R4);
    [newPTBR + 16] = R5;
    [newPTBR + 17] = "0110";
    multipush(R0, R1, R2, R3, R4);
    R1 = 1;
    call MEMORY_MANAGER;
    R5 = R0;
    multipop(R0, R1, R2, R3, R4);
    [newPTBR + 18] = R5;
    [newPTBR + 19] = "0110";

    [PROCESS_TABLE + (newPID*16) + 3] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 3];
    [PROCESS_TABLE + (newPID*16) + 6] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 6];
    [PROCESS_TABLE + (newPID*16) + 10] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 10]; 
    [PROCESS_TABLE + (newPID*16) + 7] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 7];
    [PROCESS_TABLE + (newPID*16) + 13] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13];

    [PROCESS_TABLE + (newPID*16) + 9] = 0;
    [PROCESS_TABLE + (newPID*16) + 12] = 0;
    [PROCESS_TABLE + (newPID*16) + 0] = 0;
    [PROCESS_TABLE + (newPID*16) + 2] = [SYSTEM_STATUS_TABLE+1];
    [PROCESS_TABLE + (newPID*16) + 4] = CREATED;

    multipush(R0, R1, R2, R3, R4);
    R1 = 1;
    call MEMORY_MANAGER;
    R5 = R0;
    multipop(R0, R1, R2, R3, R4);
    [PROCESS_TABLE + (newPID*16) + 11] = R5;


    //initializing per process resource table for child process 
    alias counter R3;
    counter = RESOURCE_TABLE_OFFSET;
    while(counter < 512) do
        [[PROCESS_TABLE + (newPID*16) + 11]*512 + counter] = [[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11]*512 + counter];
        [[PROCESS_TABLE + (newPID*16) + 11]*512 + counter + 1] = [[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 11]*512 + counter + 1];
        if ([[PROCESS_TABLE + (newPID*16 + 11)]*512 + counter] == 1) then 
            [SEMAPHORE_TABLE + [[PROCESS_TABLE + (newPID*16) + 11]*512 + counter + 1]*4 + 1] = [SEMAPHORE_TABLE + [[PROCESS_TABLE + (newPID*16) + 11]*512 + counter + 1]*4 + 1] + 1;
        endif;
        counter = counter + 2;
    endwhile;

    //copying disk map table 
    counter = 0;
    while (counter < 10) do 
        [DISK_MAP_TABLE + (newPID*10) + counter] = [DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE+1]*10) + counter];
        counter = counter + 1;
    endwhile;


    //copy pasting page table entries     
    counter = 0;
    while (counter < 16) do 
        [newPTBR + counter] = [PTBR + counter]; //copying library heap and code pages
        [newPTBR + counter + 1] = [PTBR + counter + 1];

        if ([newPTBR + counter] != -1) then //incrementing mem free list 
            [MEMORY_FREE_LIST + [newPTBR + counter]] = [MEMORY_FREE_LIST + [newPTBR + counter]] + 1;
        endif;

        counter = counter+2;
    endwhile;


    //copying user stack pages 
    alias oldStack R5;
    alias newStack R6;
    alias temp R7;
    temp = 16;
    while (temp < 20) do
        oldStack = [PTBR + temp];
        newStack = [newPTBR + temp];
        counter = 0;
        while (counter < 512) do 
            [newStack*512 + counter] = [oldStack*512 + counter];
            counter = counter + 1;
        endwhile;
        temp = temp+2;
    endwhile;

    [[PROCESS_TABLE + (newPID*16) + 11]*512] = BP;
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 0;

    [[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = newPID;
    [[newPTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512] = 0;

    SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13];
endif;

breakpoint;
ireturn;

