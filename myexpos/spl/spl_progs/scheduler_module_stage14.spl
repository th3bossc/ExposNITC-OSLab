breakpoint;
multipush(BP);

alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID*16;

[process_table_entry + 12] = SP%512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;


alias nextPID R2;
nextPID = currentPID + 1;
while ([PROCESS_TABLE + (nextPID)*16 + 4] != CREATED && [PROCESS_TABLE + (nextPID*16) + 4] != READY && nextPID < MAX_PROC_NUM) do
    nextPID = nextPID + 1;
endwhile;

if (nextPID == MAX_PROC_NUM) then
    nextPID = 1;
    while([PROCESS_TABLE + (nextPID)*16 + 4] != CREATED && [PROCESS_TABLE + (nextPID*16) + 4] != READY && nextPID < currentPID) do 
        nextPID = nextPID + 1;
    endwhile; 
    if (nextPID == currentPID) then
        nextPID = 0;
    endif;
endif;

alias new_process_table R3;
new_process_table = PROCESS_TABLE + nextPID * 16;

//Set back Kernel SP, PTBR , PTLR
SP =  [new_process_table + 11] * 512 + [new_process_table + 12];
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];
[SYSTEM_STATUS_TABLE + 1] = nextPID;


if ([new_process_table + 4] == CREATED) then
    [new_process_table + 4] = RUNNING;
    SP = [new_process_table + 13];
    ireturn;
endif;

[new_process_table + 4] = RUNNING;
SP = [PROCESS_TABLE + (nextPID*16) + 11]*512 + [PROCESS_TABLE + (nextPID*16) + 12]; //load sp from word 13 of process table
multipop(BP);
breakpoint;
return;